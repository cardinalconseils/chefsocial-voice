{
  "name": "ChefSocial SMS Briefing & Content Generation Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sms-schedule",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "SMS Schedule Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "sms-schedule-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.responseType}}",
              "operation": "equal",
              "value2": "immediate"
            }
          ]
        }
      },
      "id": "check-timing",
      "name": "Check If Immediate",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "mode": "chooseBranches",
        "branches": [
          {
            "name": "immediate"
          },
          {
            "name": "scheduled"
          }
        ]
      },
      "id": "route-timing",
      "name": "Route by Timing",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "minutes"
      },
      "id": "wait-immediate",
      "name": "Wait 2 Minutes",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "dateTime": "={{$json.scheduledTime}}"
      },
      "id": "wait-scheduled",
      "name": "Wait Until Scheduled",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$env.CHEFSOCIAL_API_URL}}/api/sms/pre-call-notification",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.CHEFSOCIAL_API_TOKEN}}",
            "Content-Type": "application/json"
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"phoneNumber\": \"{{$json.phoneNumber}}\",\n  \"sessionId\": \"{{$json.sessionId}}\"\n}"
      },
      "id": "send-pre-call-sms",
      "name": "Send Pre-Call SMS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$env.CHEFSOCIAL_API_URL}}/api/voice/start-briefing",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.CHEFSOCIAL_API_TOKEN}}",
            "Content-Type": "application/json"
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"sessionId\": \"{{$json.sessionId}}\",\n  \"phoneNumber\": \"{{$json.phoneNumber}}\",\n  \"imageUrl\": \"{{$json.imageUrl}}\"\n}"
      },
      "id": "start-livekit-call",
      "name": "Start LiveKit Briefing",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "amount": 5,
        "unit": "minutes"
      },
      "id": "wait-for-briefing",
      "name": "Wait for Briefing",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "requestMethod": "GET",
        "url": "={{$env.CHEFSOCIAL_API_URL}}/api/sms/session/{{$json.sessionId}}",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.CHEFSOCIAL_API_TOKEN}}"
          }
        }
      },
      "id": "get-briefing-context",
      "name": "Get Briefing Context",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.briefingContext !== null}}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-briefing-complete",
      "name": "Check Briefing Complete",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$env.OPENAI_API_URL}}/v1/chat/completions",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.OPENAI_API_KEY}}",
            "Content-Type": "application/json"
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are ChefSocial's viral content generator. Create engaging social media content based on the briefing context.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Create viral social media content for: Dish: {{$json.briefingContext.dishStory}}, Audience: {{$json.briefingContext.targetAudience}}, Mood: {{$json.briefingContext.desiredMood}}, Platforms: {{$json.briefingContext.platformPreferences}}\"\n    }\n  ],\n  \"max_tokens\": 1500,\n  \"temperature\": 0.8\n}"
      },
      "id": "generate-content",
      "name": "Generate Content with AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $input.first().json;\nconst briefingContext = $('Get Briefing Context').first().json.briefingContext;\n\n// Parse AI generated content\nconst generatedContent = JSON.parse(aiResponse.choices[0].message.content);\n\n// Format for different platforms\nconst content = {\n  instagram: {\n    caption: generatedContent.instagram?.caption || generatedContent.caption,\n    hashtags: generatedContent.instagram?.hashtags || generatedContent.hashtags,\n    type: 'post'\n  },\n  tiktok: {\n    caption: generatedContent.tiktok?.caption || generatedContent.caption,\n    hashtags: generatedContent.tiktok?.hashtags || generatedContent.hashtags,\n    type: 'video'\n  },\n  facebook: {\n    caption: generatedContent.facebook?.caption || generatedContent.caption,\n    type: 'post'\n  }\n};\n\n// Content preview for SMS\nconst preview = {\n  caption: content.instagram.caption.substring(0, 100) + '...',\n  platforms: Object.keys(content),\n  viralScore: Math.floor(Math.random() * 30) + 70 // Simulated viral score\n};\n\nreturn {\n  sessionId: briefingContext.sessionId,\n  phoneNumber: briefingContext.phoneNumber,\n  content: content,\n  preview: preview,\n  generatedAt: new Date().toISOString()\n};"
      },
      "id": "format-content",
      "name": "Format Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 200]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$env.CHEFSOCIAL_API_URL}}/api/content/store",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.CHEFSOCIAL_API_TOKEN}}",
            "Content-Type": "application/json"
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"sessionId\": \"{{$json.sessionId}}\",\n  \"content\": {{JSON.stringify($json.content)}},\n  \"preview\": {{JSON.stringify($json.preview)}}\n}"
      },
      "id": "store-content",
      "name": "Store Generated Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2660, 200]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$env.CHEFSOCIAL_API_URL}}/api/sms/content-ready",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.CHEFSOCIAL_API_TOKEN}}",
            "Content-Type": "application/json"
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"phoneNumber\": \"{{$json.phoneNumber}}\",\n  \"sessionId\": \"{{$json.sessionId}}\",\n  \"preview\": {{JSON.stringify($json.preview)}}\n}"
      },
      "id": "send-content-ready-sms",
      "name": "Send Content Ready SMS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2880, 200]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "content-approval",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "approval-webhook",
      "name": "Content Approval Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [3100, 200],
      "webhookId": "content-approval-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "equal",
              "value2": "approve"
            }
          ]
        }
      },
      "id": "check-approval",
      "name": "Check If Approved",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [3320, 200]
    },
    {
      "parameters": {
        "jsCode": "// Social media posting logic would go here\n// For now, we'll simulate successful posting\n\nconst platforms = $json.platforms || ['instagram', 'tiktok', 'facebook'];\nconst results = [];\n\nplatforms.forEach(platform => {\n  results.push({\n    platform: platform,\n    status: 'posted',\n    postId: `${platform}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n    postedAt: new Date().toISOString(),\n    engagement: {\n      likes: Math.floor(Math.random() * 100) + 50,\n      comments: Math.floor(Math.random() * 20) + 5,\n      shares: Math.floor(Math.random() * 30) + 10\n    }\n  });\n});\n\nreturn {\n  sessionId: $json.sessionId,\n  phoneNumber: $json.phoneNumber,\n  postingResults: results,\n  totalPlatforms: results.length,\n  successfulPosts: results.filter(r => r.status === 'posted').length\n};"
      },
      "id": "post-to-social-media",
      "name": "Post to Social Media",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3540, 100]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{$env.CHEFSOCIAL_API_URL}}/api/sms/posting-complete",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.CHEFSOCIAL_API_TOKEN}}",
            "Content-Type": "application/json"
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"phoneNumber\": \"{{$json.phoneNumber}}\",\n  \"sessionId\": \"{{$json.sessionId}}\",\n  \"results\": {{JSON.stringify($json.postingResults)}}\n}"
      },
      "id": "send-success-sms",
      "name": "Send Success SMS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3760, 100]
    },
    {
      "parameters": {
        "respond": true,
        "responseBody": "{\n  \"success\": true,\n  \"message\": \"Content posted successfully\",\n  \"results\": {{JSON.stringify($json.postingResults)}}\n}",
        "options": {}
      },
      "id": "respond-success",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [3980, 100]
    },
    {
      "parameters": {
        "respond": true,
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Content was not approved\",\n  \"action\": \"{{$json.action}}\"\n}",
        "options": {}
      },
      "id": "respond-not-approved",
      "name": "Respond Not Approved",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [3540, 300]
    },
    {
      "parameters": {
        "respond": true,
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Briefing not completed yet\",\n  \"sessionId\": \"{{$json.sessionId}}\"\n}",
        "options": {}
      },
      "id": "respond-briefing-incomplete",
      "name": "Respond Briefing Incomplete",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2220, 400]
    },
    {
      "parameters": {
        "respond": true,
        "responseBody": "{\n  \"success\": true,\n  \"message\": \"SMS briefing workflow started\",\n  \"sessionId\": \"{{$json.sessionId}}\",\n  \"scheduledTime\": \"{{$json.scheduledTime}}\"\n}",
        "options": {}
      },
      "id": "respond-scheduled",
      "name": "Respond Scheduled",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 500]
    }
  ],
  "connections": {
    "SMS Schedule Trigger": {
      "main": [
        [
          {
            "node": "Check If Immediate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Immediate": {
      "main": [
        [
          {
            "node": "Wait 2 Minutes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait Until Scheduled",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2 Minutes": {
      "main": [
        [
          {
            "node": "Send Pre-Call SMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Until Scheduled": {
      "main": [
        [
          {
            "node": "Send Pre-Call SMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Pre-Call SMS": {
      "main": [
        [
          {
            "node": "Start LiveKit Briefing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start LiveKit Briefing": {
      "main": [
        [
          {
            "node": "Wait for Briefing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Briefing": {
      "main": [
        [
          {
            "node": "Get Briefing Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Briefing Context": {
      "main": [
        [
          {
            "node": "Check Briefing Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Briefing Complete": {
      "main": [
        [
          {
            "node": "Generate Content with AI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Briefing Incomplete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content with AI": {
      "main": [
        [
          {
            "node": "Format Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Content": {
      "main": [
        [
          {
            "node": "Store Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Generated Content": {
      "main": [
        [
          {
            "node": "Send Content Ready SMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Content Ready SMS": {
      "main": [
        [
          {
            "node": "Content Approval Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Approval Webhook": {
      "main": [
        [
          {
            "node": "Check If Approved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Approved": {
      "main": [
        [
          {
            "node": "Post to Social Media",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Not Approved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Social Media": {
      "main": [
        [
          {
            "node": "Send Success SMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Success SMS": {
      "main": [
        [
          {
            "node": "Respond Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-06-17T00:00:00.000Z",
      "updatedAt": "2024-06-17T00:00:00.000Z",
      "id": "1",
      "name": "chefsocial"
    },
    {
      "createdAt": "2024-06-17T00:00:00.000Z", 
      "updatedAt": "2024-06-17T00:00:00.000Z",
      "id": "2",
      "name": "sms"
    },
    {
      "createdAt": "2024-06-17T00:00:00.000Z",
      "updatedAt": "2024-06-17T00:00:00.000Z", 
      "id": "3",
      "name": "content-generation"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-06-17T00:00:00.000Z",
  "versionId": "1"
}